// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.lazyarts.vikram.cached_video_player;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class MessagesHelper {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class VideoItem {
    private @NonNull String videoUrl;
    public @NonNull String getVideoUrl() { return videoUrl; }
    public void setVideoUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"videoUrl\" is null.");
      }
      this.videoUrl = setterArg;
    }

    private @NonNull Long size;
    public @NonNull Long getSize() { return size; }
    public void setSize(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"size\" is null.");
      }
      this.size = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private VideoItem() {}
    public static final class Builder {
      private @Nullable String videoUrl;
      public @NonNull Builder setVideoUrl(@NonNull String setterArg) {
        this.videoUrl = setterArg;
        return this;
      }
      private @Nullable Long size;
      public @NonNull Builder setSize(@NonNull Long setterArg) {
        this.size = setterArg;
        return this;
      }
      public @NonNull VideoItem build() {
        VideoItem pigeonReturn = new VideoItem();
        pigeonReturn.setVideoUrl(videoUrl);
        pigeonReturn.setSize(size);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("videoUrl", videoUrl);
      toMapResult.put("size", size);
      return toMapResult;
    }
    static @NonNull VideoItem fromMap(@NonNull Map<String, Object> map) {
      VideoItem pigeonResult = new VideoItem();
      Object videoUrl = map.get("videoUrl");
      pigeonResult.setVideoUrl((String)videoUrl);
      Object size = map.get("size");
      pigeonResult.setSize((size == null) ? null : ((size instanceof Integer) ? (Integer)size : (Long)size));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class VideoPlayerHelperApiCodec extends StandardMessageCodec {
    public static final VideoPlayerHelperApiCodec INSTANCE = new VideoPlayerHelperApiCodec();
    private VideoPlayerHelperApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return VideoItem.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof VideoItem) {
        stream.write(128);
        writeValue(stream, ((VideoItem) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface VideoPlayerHelperApi {
    void precacheVideos(@NonNull List<VideoItem> videos, Result<Boolean> result);
    void precacheVideo(@NonNull VideoItem video, Result<Boolean> result);
    void preparePlayerAfterError(@NonNull Long textureId);

    /** The codec used by VideoPlayerHelperApi. */
    static MessageCodec<Object> getCodec() {
      return VideoPlayerHelperApiCodec.INSTANCE;
    }

    /** Sets up an instance of `VideoPlayerHelperApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, VideoPlayerHelperApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerHelperApi.precacheVideos", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<VideoItem> videosArg = (List<VideoItem>)args.get(0);
              if (videosArg == null) {
                throw new NullPointerException("videosArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.precacheVideos(videosArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerHelperApi.precacheVideo", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              VideoItem videoArg = (VideoItem)args.get(0);
              if (videoArg == null) {
                throw new NullPointerException("videoArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.precacheVideo(videoArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerHelperApi.preparePlayerAfterError", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number textureIdArg = (Number)args.get(0);
              if (textureIdArg == null) {
                throw new NullPointerException("textureIdArg unexpectedly null.");
              }
              api.preparePlayerAfterError((textureIdArg == null) ? null : textureIdArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
